// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "ypeskov/go_hillel_9/repository/models"

	mock "github.com/stretchr/testify/mock"
)

// ItemRepositoryInterface is an autogenerated mock type for the ItemRepositoryInterface type
type ItemRepositoryInterface struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: srcItem
func (_m *ItemRepositoryInterface) CreateItem(srcItem *models.Item) (*models.Item, error) {
	ret := _m.Called(srcItem)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Item) (*models.Item, error)); ok {
		return rf(srcItem)
	}
	if rf, ok := ret.Get(0).(func(*models.Item) *models.Item); ok {
		r0 = rf(srcItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Item) error); ok {
		r1 = rf(srcItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateItemComment provides a mock function with given fields: comment
func (_m *ItemRepositoryInterface) CreateItemComment(comment *models.ItemComment) (*models.ItemComment, error) {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemComment")
	}

	var r0 *models.ItemComment
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.ItemComment) (*models.ItemComment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(*models.ItemComment) *models.ItemComment); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ItemComment)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.ItemComment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: id, userId
func (_m *ItemRepositoryInterface) DeleteItem(id int, userId int) error {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllItems provides a mock function with given fields:
func (_m *ItemRepositoryInterface) GetAllItems() ([]*models.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllItems")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemById provides a mock function with given fields: id, userId
func (_m *ItemRepositoryInterface) GetItemById(id int, userId int) (*models.Item, error) {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemById")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*models.Item, error)); ok {
		return rf(id, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *models.Item); ok {
		r0 = rf(id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsList provides a mock function with given fields: userId
func (_m *ItemRepositoryInterface) GetItemsList(userId int) ([]*models.Item, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsList")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*models.Item, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []*models.Item); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: id, srcItem, userId
func (_m *ItemRepositoryInterface) UpdateItem(id int, srcItem *models.Item, userId int) (*models.Item, error) {
	ret := _m.Called(id, srcItem, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *models.Item, int) (*models.Item, error)); ok {
		return rf(id, srcItem, userId)
	}
	if rf, ok := ret.Get(0).(func(int, *models.Item, int) *models.Item); ok {
		r0 = rf(id, srcItem, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *models.Item, int) error); ok {
		r1 = rf(id, srcItem, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewItemRepositoryInterface creates a new instance of ItemRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemRepositoryInterface {
	mock := &ItemRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
